generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id              String             @id @default(cuid())
  name            String?
  email           String             @unique
  password        String?
  role            Role               @default(USER)
  emailVerified   DateTime?
  company         String?
  phone           String?
  address         String?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  orders          Order[]
  sampleRequests  SampleRequest[]
  verificationTokens VerificationToken[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Product {
  id             String          @id @default(cuid())
  name           String
  description    String?
  categoryId     String
  price          Float
  minOrderQty    Int
  images         String[]
  specifications Json?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  orders         OrderItem[]
  category       Category        @relation(fields: [categoryId], references: [id])
  sampleRequests SampleRequest[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}

model SampleRequest {
  id        String        @id @default(cuid())
  userId    String
  productId String
  status    RequestStatus @default(PENDING)
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  product   Product       @relation(fields: [productId], references: [id])
  user      User          @relation(fields: [userId], references: [id])
}

enum Role {
  USER
  BUYER
  ADMIN
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  SHIPPED
}